// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NanyPet.Api.Models;

#nullable disable

namespace NanyPet.Api.Migrations
{
    [DbContext(typeof(nanypetContext))]
    [Migration("20230703172257_BaseModel")]
    partial class BaseModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("NanyPet.Api.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<DateTime?>("AppointmentTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("appointment_time");

                    b.Property<int?>("HerderId")
                        .HasColumnType("int")
                        .HasColumnName("herder_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("pet_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HerderId" }, "fk_appointment_herder");

                    b.HasIndex(new[] { "PetId" }, "fk_appointment_pet");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("NanyPet.Api.Models.Herder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("city");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("email_user");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmailUser" }, "email_user");

                    b.ToTable("herders", (string)null);
                });

            modelBuilder.Entity("NanyPet.Api.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("city");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("email_user");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmailUser" }, "email_user")
                        .IsUnique()
                        .HasDatabaseName("email_user1");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("NanyPet.Api.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("breed");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("species");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OwnerId" }, "fk_pet_owner");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("NanyPet.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NanyPet.Api.Models.Appointment", b =>
                {
                    b.HasOne("NanyPet.Api.Models.Herder", "Herder")
                        .WithMany("Appointments")
                        .HasForeignKey("HerderId")
                        .HasConstraintName("fk_appointment_herder");

                    b.HasOne("NanyPet.Api.Models.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_appointment_pet");

                    b.Navigation("Herder");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("NanyPet.Api.Models.Herder", b =>
                {
                    b.HasOne("NanyPet.Api.Models.User", "EmailUserNavigation")
                        .WithMany("Herders")
                        .HasForeignKey("EmailUser")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("herders_ibfk_1");

                    b.Navigation("EmailUserNavigation");
                });

            modelBuilder.Entity("NanyPet.Api.Models.Owner", b =>
                {
                    b.HasOne("NanyPet.Api.Models.User", "EmailUserNavigation")
                        .WithOne("Owner")
                        .HasForeignKey("NanyPet.Api.Models.Owner", "EmailUser")
                        .HasPrincipalKey("NanyPet.Api.Models.User", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("owners_ibfk_1");

                    b.Navigation("EmailUserNavigation");
                });

            modelBuilder.Entity("NanyPet.Api.Models.Pet", b =>
                {
                    b.HasOne("NanyPet.Api.Models.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pet_owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NanyPet.Api.Models.Herder", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("NanyPet.Api.Models.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("NanyPet.Api.Models.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("NanyPet.Api.Models.User", b =>
                {
                    b.Navigation("Herders");

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
